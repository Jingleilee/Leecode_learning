class Solution:
    def decodeString(self, s: str) -> str:
        # 栈的方法
        # stack = []
        # num = 0
        # cur_str = ''
        # last_str = ''
        # cur_num = ''
        # sr = ''
        # result = ''
        # for st in s:
        #     print(st)
        #     if st>='0' and st<='9':
        #         num = num*10 +int(st)
        #     elif st == '[':
        #         stack.append((num,result))
        #         result = ''
        #         num = 0
        #     elif st == ']':
        #         cur_num, last_str = stack.pop()
        #         result = last_str + cur_num * result
        #     else:
        #         result += st
        # return result
        
        # 递归
        
        def dfs(s,i):
            res , num = '',0
            while i <len(s):
                if '0' <= s[i] <= '9':
                    num = num*10 + int(s[i])
                elif s[i] == '[':
                    i,tmp = dfs(s,i+1)
                    res = res+ num*tmp
                    num = 0
                elif s[i] == ']':
                    return i,res
                else:
                    res+=s[i]
                i += 1
            return res
        return dfs(s,0)
